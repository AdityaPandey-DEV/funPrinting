import mongoose from 'mongoose';

export interface IOrder {
  _id: string;
  orderId: string;
  customerInfo: {
    name: string;
    phone: string;
    email: string;
  };
  orderType: 'file' | 'template';
  fileURL?: string;
  fileType?: string; // Store the original file type (e.g., 'application/pdf', 'image/jpeg')
  originalFileName?: string; // Store the original file name
  // Template-specific fields
  templateId?: string;
  templateName?: string;
  formData?: Record<string, string | number | boolean>;
  filledDocxUrl?: string;
  filledPdfUrl?: string;
  // Legacy template data for backward compatibility
  templateData?: {
    templateType: string;
    formData: Record<string, string | number | boolean>;
    generatedPDF?: string;
  };
  printingOptions: {
    pageSize: 'A4' | 'A3';
    color: 'color' | 'bw';
    sided: 'single' | 'double';
    copies: number;
    pageCount?: number;
  };
  paymentStatus: 'pending' | 'completed' | 'failed';
  orderStatus: 'pending' | 'printing' | 'dispatched' | 'delivered';
  status?: 'pending_payment' | 'paid' | 'processing' | 'completed' | 'cancelled';
  amount: number;
  deliveryOption: {
    type: 'pickup' | 'delivery';
    location?: {
      lat: number;
      lng: number;
      address: string;
    };
    distance?: number;
    deliveryCharge?: number;
    address?: string;
    city?: string;
    pinCode?: string;
  };
  razorpayOrderId?: string;
  razorpayPaymentId?: string;
  createdAt: Date;
  updatedAt: Date;
}

const orderSchema = new mongoose.Schema<IOrder>({
  orderId: {
    type: String,
    required: false, // Will be auto-generated by pre-save hook
    unique: true,
  },
  customerInfo: {
    name: { type: String, required: true },
    phone: { type: String, required: true },
    email: { type: String, required: true },
  },
  orderType: {
    type: String,
    enum: ['file', 'template'],
    required: true,
  },
  fileURL: String,
  fileType: String,
  originalFileName: String,
  // Template-specific fields
  templateId: String,
  templateName: String,
  formData: mongoose.Schema.Types.Mixed,
  filledDocxUrl: String,
  filledPdfUrl: String,
  // Legacy template data for backward compatibility
  templateData: {
    templateType: String,
    formData: mongoose.Schema.Types.Mixed,
    generatedPDF: String,
  },
  printingOptions: {
    pageSize: {
      type: String,
      enum: ['A4', 'A3'],
      required: true,
    },
    color: {
      type: String,
      enum: ['color', 'bw'],
      required: true,
    },
    sided: {
      type: String,
      enum: ['single', 'double'],
      required: true,
    },
    copies: {
      type: Number,
      required: true,
      min: 1,
    },
    pageCount: {
      type: Number,
      default: 1,
    },
  },
  paymentStatus: {
    type: String,
    enum: ['pending', 'completed', 'failed'],
    default: 'pending',
  },
  orderStatus: {
    type: String,
    enum: ['pending', 'printing', 'dispatched', 'delivered'],
    default: 'pending',
  },
  status: {
    type: String,
    enum: ['pending_payment', 'paid', 'processing', 'completed', 'cancelled'],
    default: 'pending_payment',
  },
  amount: {
    type: Number,
    required: true,
  },
  deliveryOption: {
    type: {
      type: String,
      enum: ['pickup', 'delivery'],
      required: true,
      default: 'pickup'
    },
    pickupLocation: String,
    location: {
      lat: Number,
      lng: Number,
      address: String
    },
    distance: Number,
    deliveryCharge: Number,
    address: String,
    city: String,
    pinCode: String
  },
  razorpayOrderId: String,
  razorpayPaymentId: String,
}, {
  timestamps: true,
});

// Generate order ID before saving
orderSchema.pre('save', async function(next) {
  if (this.isNew) {
    const count = await mongoose.model('Order').countDocuments();
    this.orderId = `ORD${String(count + 1).padStart(6, '0')}`;
  }
  next();
});

export default mongoose.models.Order || mongoose.model<IOrder>('Order', orderSchema);
